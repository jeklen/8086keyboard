CODE_SEG SEGMENT
	ASSUME CS:CODE_SEG, DS:CODE_SEG
	KEYCODE     DB  1EH, 30H, 2EH, 20H, 12H, 21H, 22H, 23H, 17H, 24H, 25H, 26H, 32H, 31H, 18H, 19H, 10H, 13H, 1FH, 14H, 16H, 2FH, 11H, 2DH, 15H, 2CH
	FLAG        DW  0
	COUNT       DW  0
	QUIT        DW  0
START:
	CALL    FAR PTR INITIATE0   ;8259
	CALL    FAR PTR INITIATE1   ;KEYBOARD
	CALL    FAR PTR INITIATE2   ;8253
	JMP     DISABLE
LOOP1:
	MOV AX, 600
	MOV BX, COUNT
	CMP BX, AX
	JA  CODE
	JMP LOOP1
LOOP2:
	MOV AX, QUIT
	CMP AX, 1
	JE  EXIT
	MOV AX, 600*2
	MOV BX, COUNT
	CMP BX, AX
	JA  CLR
	JMP LOOP2
DISABLE:
	MOV AX, 0
	MOV FLAG, AX
	JMP LOOP1
CODE:
	MOV AX, 1
	MOV FLAG, AX
	JMP LOOP2
CLR:
	MOV AX, 0
	MOV COUNT, AX
	JMP DISABLE
EXIT:
	MOV DX, SEG START
	MOV DS, DX
	MOV DX, OFFSET START
	INT 27H

INITIATE0   PROC    FAR ;8259
	PUSH    AX
	MOV     AL, 13H
	OUT     20H, AL
	MOV     AL, 8
	OUT     21H, AL
	MOV     AL, 9
	OUT     21H, AL
	POP     AX
	RET
INITIATE0   ENDP

INITIATE1   PROC    FAR ;KETBOARD
	PUSH    AX
	PUSH    BX
	PUSH    ES
	CLI
	MOV     AX, 0
	MOV     ES, AX
	MOV     BX, 9*4
	MOV     AX, OFFSET  INTRAD1
	MOV     ES:[BX], AX
	MOV     AX, SEG INTRAD1
	MOV     ES:[BX+2], AX
	STI
	POP     ES
	POP     BX
	POP     AX
	RET
INITIATE1   ENDP


INITIATE2   PROC    FAR ;8253
	PUSH    AX
	PUSH    BX
	PUSH    ES
	MOV AL, 36H
	OUT 43H, AL
	MOV AL, 20H
	OUT 40H, AL
	MOV AL, 4EH
	OUT 40H, AL
	CLI
	MOV AX, 0
	MOV ES, AX
	MOV BX, 8*4
	MOV AX, OFFSET  INTRAD2
	MOV ES:[BX], AX
	MOV AX, SEG INTRAD2
	MOV ES:[BX+2], AX
	STI
	POP ES
	POP BX
	POP AX
	RET
INITIATE2   ENDP

INTRAD1:
	PUSH    AX
	PUSH    DX
	PUSH    DS
	STI
	IN      AL, 060H
	PUSH    AX
	IN      AL, 061H
	MOV     AH, AL
	OR      AL, 80H
	OUT     061H, AL
	XCHG    AH, AL
	OUT     061H, AL
	POP     AX
	MOV     BX, FLAG
	CMP     BX, 0
	JE      BLOCK
	CMP     AL, 39H
	JE      EXIT_P
COMPARE:
	MOV    BX, SEG KEYCODE
	MOV    DS, BX
	MOV    BX, 0
COME:
	MOV    DL, [BX]
	CMP    AL, DL
	JE     DISPLAY
	ADD    BX, 1
	CMP    BX, 26
	JE     BLOCK
	JMP    COME
DISPLAY:
	MOV    DL, BL
	ADD    DL, 1
	CMP    DL, 26
	JNE    A_Y
	MOV    DX, 0
A_Y:
	ADD    DX, 61H
	MOV    AH, 2
	INT    21H
BLOCK:
	CLI
	MOV     AL, 20H
	OUT     20H, AL
	POP     DS
	POP     DX
	POP     AX
	IRET

INTRAD2:
	STI
	PUSH    AX
	MOV     AX, COUNT
	ADD     AX, 1
	MOV     COUNT, AX
	CLI
	MOV     AL, 20H
	OUT     20H, AL
	POP     AX
	IRET

EXIT_P:
	MOV     AX, 1
	MOV     QUIT, AX
	JMP     BLOCK
CODE_SEG    ENDS
END START
